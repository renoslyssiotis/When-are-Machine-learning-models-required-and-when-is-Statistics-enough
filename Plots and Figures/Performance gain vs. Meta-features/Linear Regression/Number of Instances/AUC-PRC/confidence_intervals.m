clear all
x = [1372,  274,  549,  823, 1098,  748,  150,  299,  449,  598,  569,...
        114,  228,  341,  455,  116,   35,   46,   70,   93,  106,   32,...
         42,   64,   85, 2000,  303,   61,  121,  182,  242,   90,   18,...
         36,   54,   72,  357,   71,  143,  214,  286,  100,   45,   50,...
         60,   80, 1439,   90,   18,   36,   54,   72,  768,  154,  307,...
        461,  614,  187,   37,   75,  112,  150,  208,   42,   83,  125,...
        166,  920, 1840,  470,   94,  188,  282,  376,  310,   62,  124,...
        186,  248, 1340,  268,  536,  804, 1072, 1060,  200,  400,  600,...
        800,   62,   12,   25,   37,   50,  767,  154,  307,  461,  614,...
        835, 1671,  210,   42,   84,  126,  168,  142,   28,   57,   85,...
        114,  336,   67,  134,  202,  269, 1885,  377,  754, 1131, 1508,...
        828,  166,  331,  497,  662,  195,   39,   78,  117,  156, 1047,...
        209,  419,  628,  838,   25,   10,   20, 1055,  211,  422,  633,...
        844,  540,  108,  216,  324,  432,  182,   36,   73,  109,  146,...
        579,  116,  232,  347,  463];

y = [ 0.        ,  0.01407625,  0.        ,  0.00643939,  0.02270959,...
        0.16686118,  0.02222222,  0.11481481,  0.09613527,  0.09010417,...
        0.        ,  0.        ,  0.06083665,  0.0235983 ,  0.04698379,...
        0.175     ,  0.        ,  0.3       ,  0.2625    ,  0.1854386 ,...
        0.26010101,  0.5       ,  0.        ,  0.        ,  0.24673203,...
        0.05080255,  0.03014245,  0.        , -0.01888889,  0.08503401,...
       -0.02852041, -0.25      ,  0.33333333,  0.        ,  0.05194805,...
        0.03333333,  0.        ,  0.        ,  0.04885057,  0.        ,...
        0.        ,  0.075     ,  0.05555556,  0.9       ,  0.91666667,...
        0.        ,  0.08712369,  0.10708899,  0.5       ,  0.        ,...
        0.19047619,  0.09541446,  0.07633283,  0.21722207,  0.02903016,...
        0.02287929,  0.04646144,  0.        ,  0.08333333,  0.07575758,...
        0.05      ,  0.01785468,  0.10353423,  0.        ,  0.31238859,...
        0.18692308,  0.1405805 ,  0.10414614,  0.05040821,  0.0968845 ,...
        0.00986842,  0.10463659,  0.09022556,  0.04239766,  0.03564467,...
        0.16666667,  0.        ,  0.06464646,  0.1977381 ,  0.08141485,...
        0.04708995,  0.04745638,  0.03573982,  0.01860593,  0.40910322,...
        0.08095238,  0.01215278,  0.03147773,  0.01617897,  0.12307692,...
        0.        ,  0.        ,  0.        ,  0.12307692,  0.30700484,...
        0.10789211,  0.01820034,  0.01469165,  0.01162625,  0.09615385,...
        0.0888573 ,  0.11534392,  0.        ,  0.        ,  0.        ,...
        0.        ,  0.02641468,  0.66666667,  0.10666667,  0.        ,...
        0.        ,  0.02554638,  0.11287478,  0.        ,  0.04112554,...
        0.0145124 ,  0.02764627,  0.17260062,  0.1205449 ,  0.12500874,...
        0.00725349,  0.01411518,  0.07739938,  0.0298352 ,  0.04084857,...
        0.00747149,  0.07969639,  0.16666667,  0.02083333,  0.05939112,...
        0.0175    ,  0.        ,  0.        ,  0.        ,  0.        ,...
        0.        ,  0.        ,  0.        ,  0.        ,  0.05054347,...
        0.05300513,  0.01571188,  0.02417727,  0.01327471,  0.        ,...
        0.00411255, -0.00227273,  0.01360816,  0.00132626,  0.07147644,...
        0.375     ,  0.18333333,  0.01406926,  0.04188034,  0.10585966,...
        0.14772727,  0.0436443 ,  0.07401391,  0.04262116];
    
xs = linspace(0,2000,2001)';

meanfunc = [];                    % empty: don't use a mean function
covfunc = @covSEiso;              % Squared Exponental covariance function
likfunc = @likGauss;              % Gaussian likelihood

%Initialise hyperparameters structure
hyp = struct('mean', [], 'cov', [-1 0], 'lik',0);
hyp2 = minimize(hyp, @gp, -100, @infGaussLik, meanfunc, covfunc, likfunc, x,y);
K = feval(covfunc, hyp2.cov, x);
%Obtain the predictive mean and variance of test points
[mu,s2] = gp(hyp2, @infGaussLik, meanfunc, covfunc, likfunc,x,y,xs);

%Compute the (joint) negative log probability (density): nlml
nlml = gp(hyp2, @infGaussLik, meanfunc, covfunc, likfunc, x, y);
%Plot the predictive mean with predictive 95% confidence bounds and training data
f = [mu+2*sqrt(s2); flip(mu-2*sqrt(s2),1)];
fill([xs; flip(xs,1)], f, [7 7 7]/8)
hold on; plot(xs, mu, 'b'); plot(x,y,'r.','LineWidth',1)
xlabel('﻿Number of instances','FontSize',14)
ylabel('﻿Performance gain of ML vs. Statistics','FontSize',14)
a = get(gca,'XTickLabel');
b = get(gca,'YTickLabel');
set(gca,'XTickLabel',a,'fontsize',14)
set(gca,'XTickLabel',b,'fontsize',14)
title('﻿Performance gain (AUC-PRC) vs. Number of instances','FontSize',14)
legend('95% predictive error bars', 'Predictive mean', 'Data', 'FontSize',12)
xlim([0 2000]);
xticks(linspace(0,2000,10));


