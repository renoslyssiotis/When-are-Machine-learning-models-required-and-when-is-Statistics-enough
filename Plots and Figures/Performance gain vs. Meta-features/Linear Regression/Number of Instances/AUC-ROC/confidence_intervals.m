clear all
x = [274,549, 823, 748, 150, 299, 449, 598, 569, 114, 228, 341, 455,...
       116,  35,  46,  70,  93, 106,  32,  42,  64,  85, 303,  61, 121,...
       182, 242,  90,  18,  36,  54,  72, 357,  71, 143, 214, 286, 100,...
        45, 80,  90,  36,  54,  72, 768, 154, 307, 461,...
       614, 187,  37,  75, 112, 150, 208,  42,  83, 125, 166, 920, 470,...
        94, 188, 282, 376, 310,  62, 124, 186, 248, 268, 536, 804, 200,...
       400, 600, 800, 106, 106, 106, 106, 106, 154, 307, 461, 614];
    
y = [0.01612903,  0.        ,  0.00625   ,  0.12211456,  0.03968254,...
        0.10130719,  0.15846154,  0.125     ,  0.        ,  0.        ,...
        0.06335283,  0.01944444,  0.05288958,  0.16666667,  0.        ,...
        0.25      ,  0.25      ,  0.20555556,  0.16666667,  0.08333333,...
        0.        ,  0.        ,  0.16666667,  0.01470588,  0.        ,...
       -0.03525641,  0.04347826, -0.025     , -0.125     ,  0.25      ,...
        0.        ,  0.07142857,  0.05      ,  0.        ,  0.        ,...
        0.04166667,  0.        ,  0.        ,  0.09375   ,  0.10714286,...
        0.        ,  0.2       ,...
        0.        ,  0.2       ,  0.13888889,  0.06055556,  0.20227273,...
        0.02777778,  0.03276353,  0.04444444,  0.        ,  0.16666667,...
        0.16666667,  0.08333333,  0.03174603,  0.07451923,  0.        ,...
        0.26515152,  0.1       ,  0.14642857,  0.07600964,  0.15178571,...
        0.025     ,  0.07142857,  0.14583333,  0.03639847,  0.04645761,...
        0.0625    ,  0.        ,  0.02693603,  0.15808824,  0.05555556,...
        0.07894737,  0.05178571,  0.07692308,  0.01666667,  0.02535302,...
        0.01567024,  0.1       ,  0.        ,  0.        ,  0.        ,...
        0.1       ,  0.2       ,  0.01818182,  0.01028708,  0.01700581];

xs = linspace(0,1000,1001)';

meanfunc = [];                    % empty: don't use a mean function
covfunc = @covSEiso;              % Squared Exponental covariance function
likfunc = @likGauss;              % Gaussian likelihood

%Initialise hyperparameters structure
hyp = struct('mean', [], 'cov', [-0.01 -1], 'lik',0);
hyp2 = minimize(hyp, @gp, -100, @infGaussLik, meanfunc, covfunc, likfunc, x,y);
K = feval(covfunc, hyp2.cov, x);
%Obtain the predictive mean and variance of test points
[mu,s2] = gp(hyp2, @infGaussLik, meanfunc, covfunc, likfunc,x,y,xs);

%Compute the (joint) negative log probability (density): nlml
nlml = gp(hyp2, @infGaussLik, meanfunc, covfunc, likfunc, x, y);
%Plot the predictive mean with predictive 95% confidence bounds and training data
f = [mu+2*sqrt(s2); flip(mu-2*sqrt(s2),1)];
fill([xs; flip(xs,1)], f, [7 7 7]/8)
hold on; plot(xs, mu, 'b'); plot(x,y,'r.','LineWidth',1)
xlabel('﻿Number of instances','FontSize',14)
ylabel('﻿Performance gain of ML vs. Statistics','FontSize',14)
a = get(gca,'XTickLabel');
b = get(gca,'YTickLabel');
set(gca,'XTickLabel',a,'fontsize',14)
set(gca,'XTickLabel',b,'fontsize',14)
title('﻿Performance gain (AUC-ROC) vs. Number of instances','FontSize',14)
legend('95% predictive error bars', 'Predictive mean', 'Data', 'FontSize',12)
xlim([0 1000]);
xticks([0 200 400 600 800 1000]);
xticklabels({0,200,400,600,800,1000}) 