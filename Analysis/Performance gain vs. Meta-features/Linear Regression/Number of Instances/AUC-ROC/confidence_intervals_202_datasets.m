clear all
x = [1372,  274,  549,  823, 1098,  748,  150,  299,  449,  598,  569,...
        114,  228,  341,  455,  116,   35,   46,   70,   93,  106,   32,...
         42,   64,   85, 2000,  303,   61,  121,  182,  242,   90,   18,...
         36,   54,   72,  357,   71,  143,  214,  286,  100,   45,   50,...
         60,   80, 1439,   90,   18,   36,   54,   72,  768,  154,  307,...
        461,  614,  187,   37,   75,  112,  150,  208,   42,   83,  125,...
        166,  920, 1840,  470,   94,  188,  282,  376,  310,   62,  124,...
        186,  248, 1340,  268,  536,  804, 1072, 1060,  200,  400,  600,...
        800,   62,   12,   25,   37,   50,  767,  154,  307,  461,  614,...
        835, 1671,  210,   42,   84,  126,  168,  142,   28,   57,   85,...
        114,  336,   67,  134,  202,  269, 1885,  377,  754, 1131, 1508,...
        828,  166,  331,  497,  662,  195,   39,   78,  117,  156, 1047,...
        209,  419,  628,  838,   25,   10,   20, 1055,  211,  422,  633,...
        844,  540,  108,  216,  324,  432,  182,   36,   73,  109,  146,...
        579,  116,  232,  347,  463];
    
y = [ 0.        ,  0.01612903,  0.        ,  0.00625   ,  0.01460655,...
        0.12211456,  0.03968254,  0.10130719,  0.15846154,  0.125     ,...
        0.        ,  0.        ,  0.06335283,  0.01944444,  0.05288958,...
        0.16666667,  0.        ,  0.25      ,  0.25      ,  0.20555556,...
        0.16666667,  0.08333333,  0.        ,  0.        ,  0.16666667,...
        0.03070877,  0.01470588,  0.        , -0.03525641,  0.04347826,...
       -0.025     , -0.125     ,  0.25      ,  0.        ,  0.07142857,...
        0.05      ,  0.        ,  0.        ,  0.04166667,  0.        ,...
        0.        ,  0.09375   ,  0.10714286,  0.5       ,  0.5       ,...
        0.        ,  0.04461197,  0.2       ,  0.5       ,  0.        ,...
        0.2       ,  0.13888889,  0.06055556,  0.20227273,  0.02777778,...
        0.03276353,  0.04444444,  0.        ,  0.16666667,  0.16666667,...
        0.08333333,  0.03174603,  0.07451923,  0.        ,  0.26515152,...
        0.1       ,  0.14642857,  0.07600964,  0.03943489,  0.15178571,...
        0.025     ,  0.07142857,  0.14583333,  0.03639847,  0.04645761,...
        0.0625    ,  0.        ,  0.02693603,  0.15808824,  0.0803638 ,...
        0.05555556,  0.07894737,  0.05178571,  0.01342593,  0.42045455,...
        0.07692308,  0.01666667,  0.02535302,  0.01567024,  0.1       ,...
        0.        ,  0.        ,  0.        ,  0.1       ,  0.43030303,...
        0.2       ,  0.01818182,  0.01028708,  0.01700581,  0.13111888,...
        0.20776463,  0.07638889,  0.        ,  0.        ,  0.        ,...
        0.        ,  0.03125   ,  0.2       ,  0.1       ,  0.        ,...
        0.        ,  0.015625  ,  0.16666667,  0.        ,  0.02272727,...
        0.01666667,  0.06773119,  0.19740778,  0.15947612,  0.14365751,...
        0.0440548 ,  0.03035167,  0.0625    ,  0.015625  ,  0.03125   ,...
       -0.00079365,  0.13636364,  0.16666667,  0.04166667,  0.08403361,...
        0.04      ,  0.        ,  0.        ,  0.        ,  0.        ,...
        0.        ,  0.        ,  0.        ,  0.        ,  0.01880927,...
        0.01724138,  0.00961538,  0.01720867,  0.025     ,  0.025     ,...
        0.025     , -0.0125    ,  0.10860656,  0.00641026,  0.11188811,...
        0.33333333,  0.375     ,  0.04166667,  0.16402715,  0.16402715,...
        0.16402715,  0.16402715,  0.13622291,  0.09068323];

xs = linspace(0,2000,2001)';

meanfunc = [];                    % empty: don't use a mean function
covfunc = @covSEiso;              % Squared Exponental covariance function
likfunc = @likGauss;              % Gaussian likelihood

%Initialise hyperparameters structure
hyp = struct('mean', [], 'cov', [-1 0], 'lik',0);
hyp2 = minimize(hyp, @gp, -100, @infGaussLik, meanfunc, covfunc, likfunc, x,y);
K = feval(covfunc, hyp2.cov, x);
%Obtain the predictive mean and variance of test points
[mu,s2] = gp(hyp2, @infGaussLik, meanfunc, covfunc, likfunc,x,y,xs);

%Compute the (joint) negative log probability (density): nlml
nlml = gp(hyp2, @infGaussLik, meanfunc, covfunc, likfunc, x, y);
%Plot the predictive mean with predictive 95% confidence bounds and training data
f = [mu+2*sqrt(s2); flip(mu-2*sqrt(s2),1)];
fill([xs; flip(xs,1)], f, [7 7 7]/8)
hold on; plot(xs, mu, 'b'); plot(x,y,'r.','LineWidth',1)
xlabel('﻿Number of instances','FontSize',14)
ylabel('﻿Performance gain of ML vs. Statistics','FontSize',14)
a = get(gca,'XTickLabel');
b = get(gca,'YTickLabel');
set(gca,'XTickLabel',a,'fontsize',14)
set(gca,'XTickLabel',b,'fontsize',14)
title('﻿Performance gain (AUC-ROC) vs. Number of instances','FontSize',14)
legend('95% predictive error bars', 'Predictive mean', 'Data', 'FontSize',12)
xlim([0 2000]);
xticks([0 200 400 600 800 1000 1200 1400 1600 1800 2000]);
xticklabels({0,200,400,600,800,1000,1200,1400,1600,1800,2000}) 